<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello DevOps</title>
    <description>A DevOps, Engineer, Half-and-half Social Retard foraging into the wild wonderlands of post Cloud Computing rukus and miscellaneous things happening to me in life.
</description>
    <link>/hello-devops/</link>
    <atom:link href="/hello-devops/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Jun 2016 17:03:04 +0000</pubDate>
    <lastBuildDate>Thu, 02 Jun 2016 17:03:04 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Beyond Virtual Machine, into Docker</title>
        <description>&lt;p&gt;Consumers today have two options (three if you bother the hassel) when
purchasing device for work: either you have one with &lt;strong&gt;OS X&lt;/strong&gt; installed, or
&lt;strong&gt;Windows&lt;/strong&gt; installed (and for hard core fans, your choice of &lt;strong&gt;unix&lt;/strong&gt;).  This
creates a problem for application developers because the environment you work
and test in is different from your deployment target, usually a unix/linux box.&lt;/p&gt;

&lt;p&gt;For those working with windows server, don’t even bother with your complaints.
&lt;a href=&quot;https://www.linux.com/news/bash-windows-what-does-it-mean&quot;&gt;Look at where Microsoft is heading&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any developers worth their salt, you would have already learned how to work
with Virtual Machines.  With the advent of &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;,
provisioning on localhost had been made &lt;em&gt;hassel free&lt;/em&gt;.  If you have never heard
of such wonderful creation, go look at
&lt;a href=&quot;/hello-devops/blog/vagrant/2016/03/12/how-i-build-this-blog-site/&quot;&gt;How I build this blog site&lt;/a&gt;
for a tour.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Still with Virtual Machine the biggest pain point is the amount of resource
and time spent when dealing with many boxes at once.  This problem occurs often
when working as a DevOps where mapping test environment to match
staging/production environment is necessary.  You could purchase VMWare
solutions or build your own OpenStack infrastructure, but really is this
necessary?&lt;/p&gt;

&lt;h2 id=&quot;the-answer&quot;&gt;The Answer&lt;/h2&gt;
&lt;p&gt;The answer is &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Instead of explaining to you the technology of
&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, I opt to demonstrate use cases where Docker
eliminates the need for Virtual Machine, and make your work life better.&lt;/p&gt;

&lt;p&gt;But first, lets setup an environment to run Docker.  Two choices here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install using &lt;a href=&quot;https://www.docker.com/products/docker-toolbox&quot;&gt;Docker Toolbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#for-the-brave-tinkerer&quot;&gt;Build a Virtual Machine with Docker installed.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nomenclature&quot;&gt;Nomenclature:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;Container&lt;/strong&gt; is a linux kernel feature that provides software level
isolation.&lt;/li&gt;
  &lt;li&gt;Container can be created, started, stoped, and removed.&lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;Image&lt;/strong&gt;  is the execution context.  A Container is created with an
Image.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; is the recipe for building a Image.&lt;/li&gt;
  &lt;li&gt;Each &lt;strong&gt;RUN&lt;/strong&gt;, &lt;strong&gt;ADD&lt;/strong&gt;, &lt;strong&gt;COPY&lt;/strong&gt;, etc adds a &lt;strong&gt;Layer&lt;/strong&gt; to the Image.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ENTRYPOINT&lt;/strong&gt; is the command that runs when the Container is started.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CMD&lt;/strong&gt; has two meaning:
    &lt;ul&gt;
      &lt;li&gt;When an ENTRYPOINT is specified, CMD will be tacked on as arguments to
ENTRYPOINT.&lt;/li&gt;
      &lt;li&gt;If we specified CMD without ENTRYPOINT, that is the command at container
start.&lt;/li&gt;
      &lt;li&gt;CMD can be overrided at the command line.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You &lt;strong&gt;store and ship&lt;/strong&gt; the image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-program-in-an-isolated-environment&quot;&gt;Running program in an isolated environment&lt;/h2&gt;
&lt;p&gt;Node.js, Ruby, and Python apps depend on a interpreter to work.  If you are
running an application written in those language ONLY for the feature it
provides, not to develop with it, there is very little reason to install the
interpreter on the system.&lt;/p&gt;

&lt;p&gt;For example, I am not a Ruby developer, but I want to use
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; for blog generation; instead of installing
Ruby which I will rarely use, I packaged jekyll as a Docker Image.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/fc8739efcd89c4557005cde416731506.js&quot;&gt; &lt;/script&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Download Dockerfile for jekyll&lt;/span&gt;
curl -sL -o Dockerfile http://bit.ly/Dockerfile-jekyll
&lt;span class=&quot;c&quot;&gt;# Build docker image&lt;/span&gt;
docker build -t jekyll .
&lt;span class=&quot;c&quot;&gt;# Download the helper script&lt;/span&gt;
curl -sL -O http://bit.ly/jekyll-cli
&lt;span class=&quot;c&quot;&gt;# Make it executable&lt;/span&gt;
chmod +x jekyll-cli
&lt;span class=&quot;c&quot;&gt;# Create a new blog src if you don&#39;t have one already&lt;/span&gt;
./jekyll-cli new your-blog-src
&lt;span class=&quot;c&quot;&gt;# Launch jekyll to serve and watch files&lt;/span&gt;
./jekyll-cli serve -s your-blog-src -d your-blog-site -H 0.0.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/S1beABvOPCA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Visit your site from your host machine at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List the images by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-had-just-happened&quot;&gt;What had just happened?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Daemon pulled image &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby:latest&lt;/code&gt; from &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;
to your disk&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby:latest&lt;/code&gt; is the base image that provides &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt; interpreter and
&lt;code class=&quot;highlighter-rouge&quot;&gt;build-essentials&lt;/code&gt; for building native gems.&lt;/li&gt;
  &lt;li&gt;We specified &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; to be the &lt;code class=&quot;highlighter-rouge&quot;&gt;entrypoint&lt;/code&gt; of the image, and the default
command line flag is &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-is-this-better&quot;&gt;Why is this better?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You did not install Ruby for just one app.&lt;/li&gt;
  &lt;li&gt;The Linux Distro you are using might not have Ruby 2.x available.  To get
around this you need &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt; to fetch and build Ruby from
source.&lt;/li&gt;
  &lt;li&gt;Suppose you wanted to try an alpha version of jekyll, you need only change the
gem version and build a sepearte Docker Image.  &lt;strong&gt;No rollback worries&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developing-in-the-target-environment&quot;&gt;Developing in the target environment&lt;/h2&gt;
&lt;p&gt;I am a &lt;a href=&quot;https://golang.org/&quot;&gt;Golang&lt;/a&gt; enthusiast; Golang by itself deserves a
dedicated topic and &lt;strong&gt;should be picked up by any DevOps who wants to ship
compact artifacts&lt;/strong&gt;.  But in order to build and write in Golang I need the Go
developer tool chain installed on my host machine to compile/build Go code…
right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;.  You could write the code in your preferred environment.  When you are
ready to build, build with Docker.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Find a place to make Gopher home&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/go
mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/src &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/pkg &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Setup script to run golang image as command&lt;/span&gt;
cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt;EOF &amp;gt;/usr/local/bin/go
#!/bin/bash
docker run --rm -v ${GOPATH}:/go golang:1.6 go \$@
EOF
&lt;/span&gt;chmod +x /usr/local/bin/go
&lt;span class=&quot;c&quot;&gt;# Now, lets get the official golang tutorial&lt;/span&gt;
go get golang.org/x/tour/gotour
&lt;span class=&quot;c&quot;&gt;# And run the tour&lt;/span&gt;
./bin/gotour -http 0.0.0.0:8080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/ZGHlj5I1tFs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-is-this-mad-magic&quot;&gt;What is this mad magic&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;We created a helper script to wrap the &lt;em&gt;docker command&lt;/em&gt; to represent &lt;strong&gt;go&lt;/strong&gt;
binary&lt;/li&gt;
  &lt;li&gt;This command creates and start a one time &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt; using &lt;em&gt;golang:1.6&lt;/em&gt;
image.&lt;/li&gt;
  &lt;li&gt;Bind directory &lt;code class=&quot;highlighter-rouge&quot;&gt;${GOPATH}&lt;/code&gt; on your &lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/go&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;no-like-v16&quot;&gt;No like v1.6!!&lt;/h3&gt;
&lt;p&gt;Fine.  Change the image version to &lt;code class=&quot;highlighter-rouge&quot;&gt;golang:1.5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Think about what had just become available: &lt;strong&gt;You can switch between language
versions without conflict with the one installed on your system&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Imagine you are an author of a quite successful open source project.  You want
to support different versions of the language runtime.  To ensure that it works
over these environments, you need to build and test them properly.  Before, you
could try to spin up VMs to deal with these disparate environments, now you
simply build and test in different containers.&lt;/p&gt;

&lt;h2 id=&quot;a-shippable-environment&quot;&gt;A shippable environment&lt;/h2&gt;
&lt;p&gt;You might have picked up the trend here with the introduction of &lt;em&gt;Ruby&lt;/em&gt; and
&lt;em&gt;Golang&lt;/em&gt; base images.  These images are built and maintained by the
&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt; team so that users could repliably
reproduce an environment with Ruby or Golang installed.  In the same vein, you
could build and ship full applications as Docker images and be confident that
these applications will not have unmet dependencies.&lt;/p&gt;

&lt;p&gt;But a Docker image can be more then just an application package.  You could
ship &lt;strong&gt;the whole environment&lt;/strong&gt; as an image, bells and whistles included, so that
people in your organization &lt;strong&gt;works with consistent tool chain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Take my own &lt;a href=&quot;https://github.com/jeffjen/workspace/blob/master/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;
as an example, when I move to a new host machine, I can restore my workspace by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap the machine to run Docker&lt;/li&gt;
  &lt;li&gt;Pull my workspace image and launch
    &lt;ul&gt;
      &lt;li&gt;Golang, Node.js, Python, and Ruby installed&lt;/li&gt;
      &lt;li&gt;Command line utility tools installed&lt;/li&gt;
      &lt;li&gt;Text editor installed and configured&lt;/li&gt;
      &lt;li&gt;Shell environment installed and configured&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;for-the-brave-tinkerer&quot;&gt;For the brave tinkerer&lt;/h2&gt;
&lt;p&gt;For those of you who want more control over your Docker Environment, here is a
step by step guide using &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

$install_docker_engine = &amp;lt;&amp;lt;SCRIPT
# Setup docker engine
apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
apt-get update &amp;amp;&amp;amp; apt-get install -y \
        apt-transport-https \
        linux-image-extra-$(uname -r)

echo &amp;quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&amp;quot; | tee /etc/apt/sources.list.d/docker.list

# install docker engine
apt-get update &amp;amp;&amp;amp; apt-get install -y \
    curl \
    docker-engine \
    htop \
    jq \
    lvm2 \
    ntp
SCRIPT

$configure_docker_engine = &amp;lt;&amp;lt;SCRIPT
mkdir -p /etc/docker /etc/default

chmod go+rx /etc/docker /etc/default

cat &amp;lt;&amp;lt;\EOF &amp;gt;/etc/docker/daemon.json 
{
  &amp;quot;hosts&amp;quot;: [
    &amp;quot;unix:///var/run/docker.sock&amp;quot;,
    &amp;quot;0.0.0.0:2375&amp;quot;
  ]
}
EOF

cat &amp;lt;&amp;lt;\EOF &amp;gt;/etc/default/docker
# Default runtime options for Docker Daemon
# For debian and ubuntu
# - Change file under /etc/default/docker
# For CentOS and RHEL
# - Change file under /etc/sysconfig/docker
# See available configuration option on https://docs.docker.com/engine/reference/commandline/daemon/
#
DOCKER_OPTS=&amp;quot;--config-file=/etc/docker/daemon.json&amp;quot;
EOF

# Restart docker daemon to reflect changes
service docker restart
SCRIPT

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true

    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_check_update = true
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.gui = false
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, &amp;quot;512&amp;quot;]
    end

    config.vm.define &amp;quot;docker-workspace&amp;quot; do |m|
        m.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
            vb.name = &amp;quot;docker-workspace&amp;quot;
        end
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $install_docker_engine
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $configure_docker_engine
        m.vm.network &amp;quot;private_network&amp;quot;, type: &amp;quot;dhcp&amp;quot;
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8080
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 2375, host: 2375
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 2379, host: 2379
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 4040, host: 4040
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 9090, host: 9090
    end

end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jeffjen/a3d4830c06b716ae26c4.js&quot;&gt; &lt;/script&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Move to your desired workspace&lt;/span&gt;
mkdir -p /path/to/Docuement
&lt;span class=&quot;c&quot;&gt;# Download Vagrantfile&lt;/span&gt;
curl -sL -o Vagrantfile http://bit.ly/Vagrantfile-docker
&lt;span class=&quot;c&quot;&gt;# Provision the box&lt;/span&gt;
vagrant up docker-workspace&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;how-to-configure-docker-daemon&quot;&gt;How to configure Docker Daemon&lt;/h3&gt;
&lt;p&gt;Docker Daemon by default listens on Unix Domain Socket &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt;.
This prevents accidental provisioning from unwanted party.&lt;/p&gt;

&lt;p&gt;Since we are &lt;em&gt;professional&lt;/em&gt; DevOps and we know what we are doing, let us
configure the Daemon to listen on TCP and Unix Domain Socket.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;{
  &amp;quot;hosts&amp;quot;: [
    &amp;quot;unix:///var/run/docker.sock&amp;quot;,
    &amp;quot;0.0.0.0:2375&amp;quot;
  ]
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jeffjen/cd96d92d0318f58e9901138d08851f85.js&quot;&gt; &lt;/script&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p /etc/docker
curl -sL -o /etc/docker/daemon.json http://bit.ly/docker-daemon-cfg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;assume-you-are-working-with-debianubuntu&quot;&gt;Assume you are working with debian/ubuntu&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sL -o /etc/default/docker http://bit.ly/docker-default-options&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;assume-you-are-working-with-centosrhel&quot;&gt;Assume you are working with CentOS/RHEL&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sL -o /etc/sysconfig/docker http://bit.ly/docker-default-options&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the configuration files are in place, restart the Docker Daemon:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;service docker restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;download-the-command-line-docker-client&quot;&gt;Download the command line Docker client&lt;/h3&gt;
&lt;p&gt;Now that the Daemon is available on port &lt;code class=&quot;highlighter-rouge&quot;&gt;2375&lt;/code&gt;, we can start using docker
client from your &lt;strong&gt;host machine&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Download and install docker client&lt;/span&gt;
curl -sL -O https://get.docker.com/builds/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -m&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/docker-1.11.0.tgz
tar xvf docker-1.11.0.tgz
cp docker/docker /usr/local/bin/docker
&lt;span class=&quot;c&quot;&gt;# Test connection to Docker Daemon&lt;/span&gt;
docker -H localhost:2375 version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 23 Apr 2016 10:00:00 +0000</pubDate>
        <link>/hello-devops/blog/docker/2016/04/23/beyond-virtual-machine/</link>
        <guid isPermaLink="true">/hello-devops/blog/docker/2016/04/23/beyond-virtual-machine/</guid>
        
        <category>devops</category>
        
        <category>docker</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Setup a Jekyll workspace and Strats for Deployment</title>
        <description>&lt;p&gt;The best place to learn how to use jekyll is starting with their
&lt;a href=&quot;https://jekyllrb.com/docs/usage/&quot;&gt;excellent guide&lt;/a&gt;.  The goal for this
post is to teach you how to review and publish a jekyll site.
Nonetheless, I will show you the minimum steps required to start one.&lt;/p&gt;

&lt;p&gt;This post covers the following topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blog site generation through &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hosting provided by &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;before-you-start&quot;&gt;Before you start&lt;/h2&gt;
&lt;p&gt;If you had missed the first post about
&lt;a href=&quot;/hello-devops/blog/vagrant/2016/03/12/how-i-build-this-blog-site/&quot;&gt;How I build this blog site&lt;/a&gt;
you might want to check that out first.  But if you are interested only in
learning how to manage Jekyll and Deployment Strategy,
&lt;a href=&quot;#create-a-jekyll-site&quot;&gt;skip ahead&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the template Vagrantfile you will be using, notice that I had already
added the box we provisioned earlier as &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/3&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true

    # Remember to provision a box with Vagrant file from
    #     https://gist.github.com/jeffjen/b466006f3a67f91a7a81
    # And add the box with vagrant package
    config.vm.box = &amp;quot;jekyll/3&amp;quot;
    config.vm.box_check_update = true
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.gui = false
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, &amp;quot;1024&amp;quot;]
    end

    config.vm.define &amp;quot;jekyll&amp;quot; do |m|
        m.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
            vb.name = &amp;quot;jekyll&amp;quot;
        end
        m.vm.network &amp;quot;private_network&amp;quot;, type: &amp;quot;dhcp&amp;quot;
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 4000, host: 4000
    end

end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jeffjen/e170fa06e6ef892cb77c.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;create-a-jekyll-site&quot;&gt;Create a jekyll site&lt;/h2&gt;
&lt;p&gt;Make a decision on where you want to place your site source in, here I refer
it by &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-sites&lt;/code&gt;.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/yQn7JR0uqIM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Bootstrap a new site called your-testing-site&lt;/span&gt;
mkdir -p /path/to/jekyll-sites/your-testing-site
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/jekyll-sites/your-testing-site
jekyll new your-testing-site
&lt;span class=&quot;c&quot;&gt;# Generate site from source&lt;/span&gt;
jekyll build -s your-testing-site -d site
&lt;span class=&quot;c&quot;&gt;# Serve the site for spot checking.&lt;/span&gt;
jekyll serve -s your-testing-site -d site -H 0.0.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;View the site by visiting &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000&lt;/code&gt; from your host machine.&lt;/p&gt;

&lt;h2 id=&quot;publish-to-github-pages&quot;&gt;Publish to Github Pages&lt;/h2&gt;
&lt;p&gt;Now that you had your source in &lt;code class=&quot;highlighter-rouge&quot;&gt;your-testing-site&lt;/code&gt; and your generated site
&lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt;, its time to prepare publishing.&lt;/p&gt;

&lt;p&gt;We will publish to &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; since this will
&lt;strong&gt;force you to version control your site&lt;/strong&gt;.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/z_1SEsjKkgc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Create a repository on &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;, then from your
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-sites&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/jekyll-sites/your-testing-site/your-testing-site
&lt;span class=&quot;c&quot;&gt;# Initialize your site source and configuration&lt;/span&gt;
git init
git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;BEGIN: blogging&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add remote repository URL and pull + rebase&lt;/span&gt;
git remote add origin &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;remote_url]
git pull origin master --rebase
&lt;span class=&quot;c&quot;&gt;# Optional push if you have had commited changes&lt;/span&gt;
git push --set-upstream origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we can start deploying our generated content to Github Pages, we need to
configure the site so that it follows Github Pages path layout.  Sites hosted
by Github Pages have their host name set as
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://username.github.io/project-name&lt;/code&gt;.  Thus we need to tell jekyll generate
the site under &lt;code class=&quot;highlighter-rouge&quot;&gt;project-name&lt;/code&gt; by configuring &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that after you had made this change, when reviewing content with
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, your site is hosted at
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/your-testing-site/&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Site settings&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Your awesome title&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-email@domain.com&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Write an awesome description for your new site here&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/your-testing-site&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Github Pages hosted root path&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the base hostname &amp;amp; protocol for your site&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;twitter_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;twitter&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Use Github Flavored Markdown&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GFM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Replace your default &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; with the above; do remember to &lt;strong&gt;add&lt;/strong&gt; and
&lt;strong&gt;commit&lt;/strong&gt; your chagnes.&lt;/p&gt;

&lt;p&gt;Now you need to prepare a dedicated branch &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.  Github Pages takes
contents from this branch and host them on their server farm. Notice that
&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Track files only pertain to your site.&lt;/li&gt;
  &lt;li&gt;Keep a separate history from your source.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why we keep two document roots.  One for your &lt;strong&gt;source code&lt;/strong&gt; and
&lt;strong&gt;jekyll runtime settings&lt;/strong&gt;; the other for &lt;strong&gt;presenting the site&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/jekyll-sites/your-testing-site/site
&lt;span class=&quot;c&quot;&gt;# Initialize generated contents and assets&lt;/span&gt;
git init
&lt;span class=&quot;c&quot;&gt;# Add remote repository URL&lt;/span&gt;
git remote add origin &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;remote_url]
&lt;span class=&quot;c&quot;&gt;# Checkout an orphaned branch gh-pages&lt;/span&gt;
git checkout --orphan gh-pages
git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;BEGIN: site generated content&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add your site contents and make your first commit, then push to remote.&lt;/span&gt;
git push --set-upstream origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And with that final step, your site is up on &lt;a href=&quot;&quot;&gt;http://username.github.io/your-testing-site/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recap-deployment-steps&quot;&gt;Recap deployment steps:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Direct Content and configuration changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;your-testing-site&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Manage your branch like you normaly would, provided not named &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;When you are ready to publish, goto your &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; directory and commit/push
to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 13 Mar 2016 10:00:00 +0000</pubDate>
        <link>/hello-devops/blog/jekyll/2016/03/13/setup-jekll-workspace-and-deploy-strats/</link>
        <guid isPermaLink="true">/hello-devops/blog/jekyll/2016/03/13/setup-jekll-workspace-and-deploy-strats/</guid>
        
        <category>jekyll</category>
        
        <category>github</category>
        
        <category>vagrant</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>How I build this blog site</title>
        <description>&lt;p&gt;Before I started writing this blog I spent a good week surveying solutions to
my blogging workflow.  I did not opt for blog site providers such as Blogger or
Wordpress: not because they are bad, but out of weighing the tradeoff between
adapting a new workflow and tool chains I grow accustomed with.&lt;/p&gt;

&lt;p&gt;In the end I landed on a solution using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing in Github Flavored Markdown in &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Blog site generation through &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hosting provided by &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And finally, &lt;strong&gt;clear documentation&lt;/strong&gt; on how to customize&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;for-the-faint-of-heart&quot;&gt;For the faint of heart&lt;/h2&gt;

&lt;p&gt;This post covers a great deal in how to provision an environment to start using
jekyll.  The target audience really is people interested in VM provisioning and
DevOps principles.&lt;/p&gt;

&lt;p&gt;Check out
&lt;a href=&quot;/hello-devops/blog/jekyll/2016/03/13/setup-jekll-workspace-and-deploy-strats/&quot;&gt;Setup a Jekyll workspace and Strats for Deployment&lt;/a&gt;
for a gentle introduction on Jekyll and Github Pages.&lt;/p&gt;

&lt;h2 id=&quot;considerations&quot;&gt;Considerations&lt;/h2&gt;
&lt;p&gt;I am a DevOps engineer working with dozens of Linux machine on-premise, Cloud
Providers (AWS, Azure, etc), and on this very machine I work on.  For many
DevOps engineer, what better way to manage these systems then working in remote
login sessions?  Adept in &lt;em&gt;text based&lt;/em&gt; tool chain is necessary, thus &lt;strong&gt;Vim&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another concern I have is with &lt;a href=&quot;#minimizing-footprint&quot;&gt;minimizing footprint&lt;/a&gt; on
the machine I work on, and &lt;a href=&quot;#repeatable-environment&quot;&gt;repeatable environment&lt;/a&gt; in
case of migration or disaster recovery.&lt;/p&gt;

&lt;p&gt;Finally, I need to &lt;a href=&quot;#version-control-configuration&quot;&gt;version control configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;minimizing-footprint&quot;&gt;Minimizing footprint&lt;/h3&gt;
&lt;p&gt;What kind of changes are you allowed to make to your rented place?  You
probably will not take down a wall, retile the floor, or even place a nail on
the wall.  That is because your landlord had a contract with you stating you
cannot, and rightly so for your own safety and their protection.&lt;/p&gt;

&lt;p&gt;Treat your device like you are &lt;em&gt;renting&lt;/em&gt; it.  Create a Virtual Machine on your
host machine, and make whatever changes there, without fear of breaking your host.&lt;/p&gt;

&lt;p&gt;How do you create a Virtual Machine?  The path of least resistance is through
&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; +
&lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VitrualBox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a simple but extendable
&lt;a href=&quot;https://www.vagrantup.com/docs/vagrantfile/&quot;&gt;Vagrantfile&lt;/a&gt; for staring your
first Virtual Mahcine.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/stQWhO_3zxw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;noscript&gt;&lt;pre&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true

    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_check_update = true
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.gui = false
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, &amp;quot;1024&amp;quot;]
    end

    config.vm.define &amp;quot;workspace&amp;quot; do |m|
        m.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
            vb.name = &amp;quot;workspace&amp;quot;
        end
        m.vm.network &amp;quot;private_network&amp;quot;, type: &amp;quot;dhcp&amp;quot;
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8080
    end

end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jeffjen/6c2d06b99a5a0e1c41ca.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Place this in a path you control, such as your &lt;code class=&quot;highlighter-rouge&quot;&gt;Docuement&lt;/code&gt; folder.  Move to
the folder where you placed this file and provision a Virtual Machine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p /path/to/Docuement
&lt;span class=&quot;c&quot;&gt;# Create Vagrantfile from gist, or create your own&lt;/span&gt;
curl -sL -o Vagrantfile http://bit.ly/Vagrant-basic
&lt;span class=&quot;c&quot;&gt;# Initialize your workspace&lt;/span&gt;
vagrant up workspace
&lt;span class=&quot;c&quot;&gt;# Wait until initialized, then login&lt;/span&gt;
vagrant ssh workspace&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you have a sandbox to work with, and a way to reproduce this box in case
you messed up.&lt;/p&gt;

&lt;h3 id=&quot;repeatable-environment&quot;&gt;Repeatable environment&lt;/h3&gt;
&lt;p&gt;Taking your living space as an example, consider the cost of relocating to a
different house.  Putting aside the cost of the rent, you need to package your
belongings, find a way to ship those packages, and unpack them when they
arrive.  The cost is huge, tedious, and error prone.&lt;/p&gt;

&lt;p&gt;Now what if you need to move your virtual living space?  This consideration is
valid because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You had a hardware failure.&lt;/li&gt;
  &lt;li&gt;You had an obscure failure in the Virtual Machine.&lt;/li&gt;
  &lt;li&gt;You are upgrading your device for better performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to recover from these problems is to create a &lt;strong&gt;repeatable
environment&lt;/strong&gt;, here I am using &lt;em&gt;Vagrant&lt;/em&gt; provisioning to reliably create an
environment with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; installed&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/2U9-hImtdYA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;noscript&gt;&lt;pre&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :
# skip installing gem documentation

$baseline_deps = &amp;lt;&amp;lt;SCRIPT
apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \
    autoconf \
    automake \
    bzip2 \
    file \
    g++ \
    gcc \
    imagemagick \
    libbz2-dev \
    libc6-dev \
    libcurl4-openssl-dev \
    libevent-dev \
    libffi-dev \
    libgeoip-dev \
    libglib2.0-dev \
    libjpeg-dev \
    liblzma-dev \
    libmagickcore-dev \
    libmagickwand-dev \
    libmysqlclient-dev \
    libncurses-dev \
    libpng-dev \
    libpq-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libtool \
    libwebp-dev \
    libxml2-dev \
    libxslt-dev \
    libyaml-dev \
    make \
    patch \
    xz-utils \
    zlib1g-dev \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
SCRIPT

$install_ruby = &amp;lt;&amp;lt;SCRIPT
mkdir -p /usr/local/etc \
    &amp;amp;&amp;amp; { \
        echo &amp;#39;install: --no-document&amp;#39;; \
        echo &amp;#39;update: --no-document&amp;#39;; \
    } &amp;gt;&amp;gt; /usr/local/etc/gemrc

export RUBY_MAJOR=2.3
export RUBY_VERSION=2.3.0
export RUBY_DOWNLOAD_SHA256=ba5ba60e5f1aa21b4ef8e9bf35b9ddb57286cb546aac4b5a28c71f459467e507
export RUBYGEMS_VERSION=2.6.1

# some of ruby&amp;#39;s build scripts are written in ruby
# we purge this later to make sure our final image uses what we just built
set -ex \
    &amp;amp;&amp;amp; buildDeps=&amp;#39; \
        bison \
        libgdbm-dev \
        ruby \
    &amp;#39; \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y --no-install-recommends $buildDeps \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
    &amp;amp;&amp;amp; curl -fSL -o ruby.tar.gz &amp;quot;http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz&amp;quot; \
    &amp;amp;&amp;amp; echo &amp;quot;$RUBY_DOWNLOAD_SHA256 *ruby.tar.gz&amp;quot; | sha256sum -c - \
    &amp;amp;&amp;amp; mkdir -p /usr/src/ruby \
    &amp;amp;&amp;amp; tar -xzf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \
    &amp;amp;&amp;amp; rm ruby.tar.gz \
    &amp;amp;&amp;amp; cd /usr/src/ruby \
    &amp;amp;&amp;amp; { echo &amp;#39;#define ENABLE_PATH_CHECK 0&amp;#39;; echo; cat file.c; } &amp;gt; file.c.new &amp;amp;&amp;amp; mv file.c.new file.c \
    &amp;amp;&amp;amp; autoconf \
    &amp;amp;&amp;amp; ./configure --disable-install-doc \
    &amp;amp;&amp;amp; make -j&amp;quot;$(nproc)&amp;quot; \
    &amp;amp;&amp;amp; make install \
    &amp;amp;&amp;amp; apt-get purge -y --auto-remove $buildDeps \
    &amp;amp;&amp;amp; gem update --system $RUBYGEMS_VERSION \
    &amp;amp;&amp;amp; rm -r /usr/src/ruby
SCRIPT

$install_jekyll = &amp;lt;&amp;lt;SCRIPT
# finally, install jekyll
gem install jekyll
SCRIPT

$inject_vagrant_insecure_pubkey = &amp;lt;&amp;lt;SCRIPT
# inject insecure keypair for Vagrnat to recreate on new provision
curl https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub \
    &amp;gt;/home/vagrant/.ssh/authorized_keys
SCRIPT

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true

    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_check_update = true
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.gui = false
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, &amp;quot;1024&amp;quot;]
    end

    config.vm.define &amp;quot;jekyll&amp;quot; do |m|
        m.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
            vb.name = &amp;quot;jekyll&amp;quot;
        end
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $baseline_deps
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $install_ruby
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $install_jekyll
        m.vm.provision &amp;quot;shell&amp;quot;, inline: $inject_vagrant_insecure_pubkey
        m.vm.network &amp;quot;private_network&amp;quot;, type: &amp;quot;dhcp&amp;quot;
        m.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 4000, host: 8081
    end

end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jeffjen/b466006f3a67f91a7a81.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Destroy the box you created earlier by &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant destroy workspace&lt;/code&gt;, and create
a new workspace with the new &lt;em&gt;Vagrantfile&lt;/em&gt;.  The provision can take a while
depending on your machine and network performance.&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;Vagrant&lt;/em&gt;, when you feel you had a good box, you could store this box to
use later, or share to your organization for a consistent environment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/Docuement
&lt;span class=&quot;c&quot;&gt;# Download the ridculously complex Vagrantfile to provision a box with jekyll&lt;/span&gt;
curl -sL -o Vagrantfile http://bit.ly/Vagrantfile-jekyll
vagrant up jekyll
&lt;span class=&quot;c&quot;&gt;# Review VirtualBox console for the name of your VM box&lt;/span&gt;
vagrant pacakge --base name-of-your-box
&lt;span class=&quot;c&quot;&gt;# Add this box with desired alias&lt;/span&gt;
vagrant box add jekyll/3 package.box&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;version-control-configuration&quot;&gt;Version control configuration&lt;/h3&gt;
&lt;p&gt;I cannot stress this enough: &lt;strong&gt;version control everything&lt;/strong&gt;.  You will be glad
when you could traceback to a working version of your environment.  Also, what
better place to store these configuration then in VCS providers such as
&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;that-was-kind-of-brutal-for-setting-up-for-jekyll&quot;&gt;That was… kind of brutal, for setting up for Jekyll&lt;/h2&gt;
&lt;p&gt;It was.  It goes to show how much were taken for granted by people
managing your site, and perhaps they do deserve to be paid for their service.&lt;/p&gt;

&lt;p&gt;But know this: &lt;em&gt;You pay for what you don’t know&lt;/em&gt;.  What you pay with today
reading this post is with your time, and if you are running a business, perhaps
you are paying with dough.&lt;/p&gt;

&lt;h2 id=&quot;in-the-next-post&quot;&gt;In the next post&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/hello-devops/blog/jekyll/2016/03/13/setup-jekll-workspace-and-deploy-strats/&quot;&gt;Setup a Jekyll workspace and Strats for Deployment&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Mar 2016 10:00:00 +0000</pubDate>
        <link>/hello-devops/blog/vagrant/2016/03/12/how-i-build-this-blog-site/</link>
        <guid isPermaLink="true">/hello-devops/blog/vagrant/2016/03/12/how-i-build-this-blog-site/</guid>
        
        <category>devops</category>
        
        <category>vagrant</category>
        
        
        <category>vagrant</category>
        
      </item>
    
  </channel>
</rss>
